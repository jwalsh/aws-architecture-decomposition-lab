* AWS Architecture Decomposition Lab
#+CREATOR: Jason Walsh <j@wal.sh> 

This repository focuses on decomposing system designs for Amazon Web Services (AWS) hands-on projects, providing practical experience with AWS use cases.

** Learning Objectives

- Decompose system designs for WAC
- Explore key AWS services and their interactions
- Understanding how different AWS services interact in real-world scenarios
- Implementing serverless, machine learning, content delivery, and data processing architectures
- Visualizing architectures using Mermaid diagrams
- Explore scalability, performance, and security considerations
- Gain hands-on experience with AWS


** References

- https://aws.amazon.com/architecture/well-architected/
- https://cloud.google.com/architecture/framework
- https://learn.microsoft.com/en-us/azure/well-architected/
- https://www.ibm.com/architectures/well-architected


** Diagrams

#+DIAGRAMS_START

*** docs/images/contact_center_rag.png
[[file:docs/images/contact_center_rag.png]]
*** docs/images/enhanced_document_understanding.png
[[file:docs/images/enhanced_document_understanding.png]]
*** docs/images/etsy_ads.png
[[file:docs/images/etsy_ads.png]]
*** docs/images/game_analytics_pipeline.png
[[file:docs/images/game_analytics_pipeline.png]]
*** docs/images/generative_ai_application_builder.png
[[file:docs/images/generative_ai_application_builder.png]]
*** docs/images/iot_airport_hotel_architecture.png
[[file:docs/images/iot_airport_hotel_architecture.png]]
*** docs/images/media_services_application_mapper.png
[[file:docs/images/media_services_application_mapper.png]]
*** docs/images/ml_image_recognition.png
[[file:docs/images/ml_image_recognition.png]]
*** docs/images/multi_tenant_ai_gateway_cost_tracking_architecture.png
[[file:docs/images/multi_tenant_ai_gateway_cost_tracking_architecture.png]]
*** docs/images/netflix_like.png
[[file:docs/images/netflix_like.png]]
*** docs/images/photo_sharing.png
[[file:docs/images/photo_sharing.png]]
*** docs/images/q-business-pdf-system-diagram.png
[[file:docs/images/q-business-pdf-system-diagram.png]]
*** docs/images/ride_sharing.png
[[file:docs/images/ride_sharing.png]]
*** docs/images/serverless_image_handler.png
[[file:docs/images/serverless_image_handler.png]]
*** docs/images/serverless_web.png
[[file:docs/images/serverless_web.png]]
*** docs/images/sra.png
[[file:docs/images/sra.png]]
*** docs/images/static_website.png
[[file:docs/images/static_website.png]]
*** docs/images/twitter_like.png
[[file:docs/images/twitter_like.png]]
*** docs/images/unified_profiles_for_travelers_and_guests.png
[[file:docs/images/unified_profiles_for_travelers_and_guests.png]]
*** docs/images/url_shortener.png
[[file:docs/images/url_shortener.png]]

#+DIAGRAMS_END

** Features 

| Category                   | Current Rating | Specific Features / Tasks                                     | Proposed Score | Implementation Sequence |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| Project Structure          |              8 | - Standardize project layouts across all examples             |              9 |                         |
|                            |                | - Implement consistent naming conventions                     |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| Makefile                   |              9 | - Add targets for running tests                               |              9 |                         |
|                            |                | - Include deployment targets for different environments       |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| Documentation              |              7 | - Expand README.org with more detailed usage instructions     |              8 |                         |
|                            |                | - Create architecture decision records (ADRs)                 |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| Diagrams                   |             10 | - Add sequence diagrams for complex interactions              |             10 |                         |
|                            |                | - Include cost estimation diagrams                            |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| Scripts                    |              9 | - Add script for automated environment setup                  |              9 |                         |
|                            |                | - Create script for generating test data                      |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| Project Variety            |              9 | - Add serverless data processing example                      |              9 |                         |
|                            |                | - Include example of multi-region architecture                |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| Dependency Management      |              8 | - Implement consistent use of Poetry across all projects      |              8 |                         |
|                            |                | - Add version pinning for critical dependencies               |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| Linting                    |              8 | - Add Python linting with flake8 or pylint                    |              8 |                         |
|                            |                | - Implement pre-commit hooks for automatic linting            |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| CI/CD Pipeline             |              2 | - Set up GitHub Actions for automated testing                 |              8 |                       2 |
|                            |                | - Implement automatic diagram generation in CI                |                |                         |
|                            |                | - Add linting checks to the CI pipeline                       |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| Testing Framework          |              2 | - Add pytest for Python testing                               |              8 |                       1 |
|                            |                | - Create basic unit tests for existing functions              |                |                         |
|                            |                | - Implement integration tests for core components             |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| Infrastructure as Code     |              3 | - Implement Terraform templates for each project              |              7 |                       4 |
|                            |                | - Start with core services (S3, DynamoDB, Lambda)             |                |                         |
|                            |                | - Gradually add more complex services                         |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| Security Scanning          |              1 | - Integrate Bandit for Python security scanning               |              6 |                       6 |
|                            |                | - Add security checks to the CI pipeline                      |                |                         |
|                            |                | - Implement regular dependency vulnerability scans            |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| API Documentation          |              1 | - Implement Swagger/OpenAPI for API projects                  |              7 |                       5 |
|                            |                | - Begin with serverless-web and url-shortener projects        |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| Containerization           |              1 | - Add Dockerfiles for applicable projects                     |              6 |                       8 |
|                            |                | - Start with etsy-ads or netflix-like projects                |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| Cost Management Tools      |              1 | - Implement AWS Cost Explorer integration                     |              5 |                       9 |
|                            |                | - Create custom scripts for cost optimization recommendations |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| Contribution Guidelines    |              2 | - Flesh out CONTRIBUTING.org with detailed guidelines         |              7 |                       7 |
|                            |                | - Include information on coding standards, PR process         |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| Licensing                  |              2 | - Choose and add appropriate open-source license              |              8 |                       3 |
|                            |                | - Ensure all files include license headers                    |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| Cross-project Integration  |              1 | - Create examples of inter-project integration                |              6 |                      10 |
|                            |                | - Develop end-to-end scenarios using multiple architectures   |                |                         |
|----------------------------+----------------+---------------------------------------------------------------+----------------+-------------------------|
| Overall Repository Quality |              7 |                                                               |              8 |                         |

** Note

In the diagrams folder, you will find Mermaid diagrams for various system designs.
These diagrams can be rendered using the mermaid command:

    mermaid view diagrams/url_shortener.mmd

To build the diagrams, run the above command in the diagrams folder.

For help or questions, please open an issue or provide feedback.

@jwalsh
